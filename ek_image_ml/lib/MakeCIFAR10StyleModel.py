# import dependencies
import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D

# define model vars
fDataAug = False
intBatchSize = 110
intEpochCount = 10 # originally 100
intPredictionCount = 1


def Go(arrTrainX, arrTestX, arrTrainY, arrTestY):
	intClassCount = len(arrTrainY.value_counts())

	# Convert class vectors to binary class matrices.
	arrTrainY = keras.utils.to_categorical(arrTrainY, intClassCount)
	arrTestX = keras.utils.to_categorical(arrTestY, intClassCount)

	# create model
	model = Sequential()
	model.add(Conv2D(32, (3, 3), padding='same',
					 input_shape=arrTrainX.shape[1:]))
	model.add(Activation('relu'))
	model.add(Conv2D(32, (3, 3)))
	model.add(Activation('relu'))
	model.add(MaxPooling2D(pool_size=(2, 2)))
	model.add(Dropout(0.25))

	model.add(Conv2D(64, (3, 3), padding='same'))
	model.add(Activation('relu'))
	model.add(Conv2D(64, (3, 3)))
	model.add(Activation('relu'))
	model.add(MaxPooling2D(pool_size=(2, 2)))
	model.add(Dropout(0.25))

	model.add(Flatten())
	model.add(Dense(512))
	model.add(Activation('relu'))
	model.add(Dropout(0.5))
	model.add(Dense(intClassCount))
	model.add(Activation('softmax'))
	
	# initiate RMSprop optimizer
	opt = keras.optimizers.RMSprop(learning_rate=0.0001, decay=1e-6)
	
	# train the model using RMSprop
	# IMPORTANT: for a single yes/no decision, loss is binary_crossentropy, not categorical_crossentropy
	model.compile(loss='binary_crossentropy',
				  optimizer=opt,
				  metrics=['accuracy'])
				  
	# rescale X's Train and Test datasets
	arrTrainX = arrTrainX.astype('float32')
	arrTestX = arrTestX.astype('float32')
	arrTrainX /= 255
	arrTestX /= 255
	
	if not fDataAug:
		print('Not using data augmentation.')
		model.fit(arrTrainX, arrTrainY,
				  batch_size=intBatchSize,
				  epochs=intEpochCount)
		# model.fit(arrTrainX, arrTrainY,
				  # batch_size=intBatchSize,
				  # epochs=intEpochCount,
				  # validation_data=(arrTestX, arrTestY),
				  # shuffle=True)
	else:
		print('Using real-time data augmentation.')
		# This will do preprocessing and realtime data augmentation:
		datagen = ImageDataGenerator(
			featurewise_center=False,  # set input mean to 0 over the dataset
			samplewise_center=False,  # set each sample mean to 0
			featurewise_std_normalization=False,  # divide inputs by std of the dataset
			samplewise_std_normalization=False,  # divide each input by its std
			zca_whitening=False,  # apply ZCA whitening
			zca_epsilon=1e-06,  # epsilon for ZCA whitening
			rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
			# randomly shift images horizontally (fraction of total width)
			width_shift_range=0.1,
			# randomly shift images vertically (fraction of total height)
			height_shift_range=0.1,
			shear_range=0.,  # set range for random shear
			zoom_range=0.,  # set range for random zoom
			channel_shift_range=0.,  # set range for random channel shifts
			# set mode for filling points outside the input boundaries
			fill_mode='nearest',
			cval=0.,  # value used for fill_mode = "constant"
			horizontal_flip=True,  # randomly flip images
			vertical_flip=False,  # randomly flip images
			# set rescaling factor (applied before any other transformation)
			rescale=None,
			# set function that will be applied on each input
			preprocessing_function=None,
			# image data format, either "channels_first" or "channels_last"
			data_format=None,
			# fraction of images reserved for validation (strictly between 0 and 1)
			validation_split=0.0)

		# compute quantities required for feature-wise normalization
		# (std, mean, and principal components if ZCA whitening is applied).
		datagen.fit(arrTrainX)
		
		# Fit the model on the batches generated by datagen.flow().
		model.fit_generator(datagen.flow(arrTrainX, arrTrainY,
										 batch_size=intBatchSize),
							epochs=intEpochCount,
							validation_data=(arrTestX, arrTestY),
							workers=4)
	
	return model